# -*- mode: Makefile; -*-
# Copyright (c) 2011 Bitcoin Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for MultiWalletCoin
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CXX=g++
DEPSDIR=/usr/local

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/build \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)/include/db48"

LIBPATHS= \
 -L"$(DEPSDIR)/lib" \
 -L"$(DEPSDIR)/lib/db48"

USE_UPNP:=1
USE_IPV6:=1

LIBS= -dead_strip

ifdef STATIC
# Build STATIC if you are redistributing the ECCoind binary
LIBS += \
 $(DEPSDIR)/lib/db48/libdb_cxx-4.8.a \
 $(DEPSDIR)/lib/libboost_system-mt.a \
 $(DEPSDIR)/lib/libboost_filesystem-mt.a \
 $(DEPSDIR)/lib/libboost_program_options-mt.a \
 $(DEPSDIR)/lib/libboost_thread-mt.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 -lz
else
LIBS += \
 -ldb_cxx-4.8 \
 -lboost_system-mt \
 -lboost_filesystem-mt \
 -lboost_program_options-mt \
 -lboost_thread-mt \
 -lssl \
 -lcrypto \
 -lz
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CFLAGS = -mmacosx-version-min=10.5 -arch x86_64 -O3 -msse2
else
CFLAGS = -g -msse2
endif

# ppc doesn't work because we don't support big-endian
CFLAGS += -Wall -Wextra -Wformat -Wno-ignored-qualifiers -Wformat-security -Wno-unused-parameter -std=c++11 -fpermissive \
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS= \
    build/txdb.o \
    build/key.o \
    build/addrman.o \
    build/alert.o \
    build/amount.o \
    build/arith_uint256.o \
    build/base58.o \
    build/bloom.o \
    build/chain.o \
    build/chainparams.o \
    build/chainparamsbase.o \
    build/checkpoints.o \
    build/clientversion.o \
    build/coins.o \
    build/compressor.o \
    build/core_read.o \
    build/core_write.o \
    build/dbwrapper.o \
    build/hash.o \
    build/keystore.o \
    build/main.o \
    build/merkleblock.o \
    build/miner.o \
    build/net.o \
    build/netbase.o \
    build/noui.o \
    build/pow.o \
    build/protocol.o \
    build/pubkey.o \
    build/random.o \
    build/scheduler.o \
    build/sync.o \
    build/timedata.o \
    build/torcontrol.o \
    build/txmempool.o \
    build/uint256.o \
    build/util.o \
    build/utilmoneystr.o \
    build/utilstrencodings.o \
    build/utiltime.o \
    build/validationinterface.o \
    build/versionbits.o \
    build/wallet/crypter.o \
    build/wallet/db.o \
    build/wallet/wallet.o \
    build/wallet/wallet_ismine.o \
    build/wallet/walletdb.o \
    build/support/cleanse.o \
    build/support/pagelocker.o \
    build/script/bitcoinconsensus.o \
    build/script/interpreter.o \
    build/script/script.o \
    build/script/script_error.o \
    build/script/sigcache.o \
    build/script/sign.o \
    build/script/standard.o \
    build/primitives/block.o \
    build/primitives/transaction.o \
    build/policy/fees.o \
    build/policy/policy.o \
    build/policy/rbf.o \
    build/crypto/hmac_sha256.o \
    build/crypto/hmac_sha512.o \
    build/crypto/ripemd160.o \
    build/crypto/sha1.o \
    build/crypto/sha256.o \
    build/crypto/sha512.o \
    build/consensus/merkle.o \
    build/compat/glibc_compat.o \
    build/compat/glibc_sanity.o \
    build/compat/glibcxx_sanity.o \
    build/compat/strnlen.o \
    build/init.o \
    build/bitcoind.o \
    build/crypto/scrypt.o \
    build/kernel.o \
    build/httprpc.o \
    build/httpserver.o \
    build/rest.o \
    build/rpcblockchain.o \
    build/rpcclient.o \
    build/rpcmining.o \
    build/rpcmisc.o \
    build/rpcnet.o \
    build/rpcprotocol.o \
    build/rpcrawtransaction.o \
    build/rpcserver.o \
    build/univalue/univalue.o \
    build/univalue/univalue_read.o \
    build/univalue/univalue_write.o \
    build/pbkdf2.o \
    build/script/stakescript.o



ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	DEFS += -DUSE_UPNP=$(USE_UPNP)
ifdef STATIC
	LIBS += $(DEPSDIR)/lib/libminiupnpc.a
else
	LIBS += -lminiupnpc
endif
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

all: leveldb secp256k1 ECCoind

LIBS += $(CURDIR)/leveldb/out-static/libleveldb.a $(CURDIR)/leveldb/out-static/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)

leveldb_make:
	cd leveldb; make; cd ..;
leveldb: leveldb_make

DEFS += $(addprefix -I,$(CURDIR)/secp256k1/include)
LIBS += $(CURDIR)/secp256k1/.libs/libsecp256k1.a

secp256k1_make:
	cd secp256k1; ./autogen.sh; ./configure --prefix=$(CURDIR)/libsecp256k1 --enable-module-recovery; make; make install; cd ..;
secp256k1: secp256k1_make

# auto-generated dependencies:
-include build/*.P

build/build.h: FORCE
	/bin/sh ../share/genbuild.sh build/build.h
version.cpp: build/build.h
DEFS += -DHAVE_BUILD_INFO

build/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

build/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

ECCoind: $(OBJS:build/%=build/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f ECCoind
	-rm -f build/*.o
	-rm -f build/*.P
	-rm -f build/build.h
	-rm -f build/network/*.o
	-rm -f build/netowkr/*.P
	-rm -f build/util/*.o
	-rm -f build/util/*.P
	-rm -f build/rpc/*.o
	-rm -f build/rpc/*.P
	-rm -f build/crypto/*.o
	-rm -f builf/crypto*.P

FORCE:
